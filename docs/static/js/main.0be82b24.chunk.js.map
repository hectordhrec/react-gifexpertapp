{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","className","value","onChange","valor","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAgB9C,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAmBO,OAC3CN,EAAc,MAKlB,SACI,uBAAOO,KAAK,OAAOC,UAAU,eAAeC,MAAOV,EAAYW,SAf7C,SAACR,GAEvBF,GAAc,SAAAW,GAAK,OAAIT,EAAEU,OAAOH,e,+BCR3BI,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDAE2BC,UAAUH,GAFrC,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACjC,OACI,sBAAKR,UAAU,yCAAf,UACI,qBAAKsB,IAAKd,EAAKe,IAAKL,IACpB,4BAAKA,QCHJM,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EACZhB,mBAAS,CAC/BuB,KAAM,GACNY,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAgBtC,OATAC,qBAAU,WACNvB,EAAQC,GAAUuB,MAAK,SAAAC,GACnBH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAGlB,CAACnB,IAEGoB,EDP2BK,CAAazB,GAAjCa,EATuB,EAS7BN,KAAcY,EATe,EASfA,QAGtB,OACI,qCACI,oBAAIzB,UAAU,yCAAd,SAAwDM,IACtDmB,GAAW,mBAAGzB,UAAU,mCAAb,qBACb,qBAAKA,UAAU,YAAf,SACKmB,EAAOJ,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEjBpBe,EAAe,WAAM,MAGM1C,mBAAS,CAAC,mBAHhB,mBAGvBQ,EAHuB,KAGXT,EAHW,KAW9B,OACI,qCACI,+CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAIA,6BAAKS,EAAWiB,KAAK,SAAAT,GAAQ,OACzB,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCpB9B2B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0be82b24.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        //setInputValue(e.target.value);\r\n        setInputValue(valor => e.target.value);\r\n    }\r\n\r\n    const handleSunmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(categories => [inputValue,...categories]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSunmit }>\r\n            <input type=\"text\" className=\"form-control\" value={inputValue} onChange={handleInputChange} />\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\n","export const getGifs = async (category) => {\r\n    const url =\r\n        `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=MZem9vJsj8lCOJkSGCDOuRBTENrRJ4io`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        };\r\n    });\r\n    \r\n    return gifs;\r\n};","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{ title }</p>\r\n        </div>\r\n    );\r\n}\r\n","import { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    // const [images, setImages] = useState([]);\r\n\r\n    /** Al colocar la categoría como dependencia, cada vez que la categoría cambie se va a ejecutar el useEffect */\r\n    // useEffect(() => {\r\n    //     getGifs(category).then(setImages);\r\n    //     // getGifs().then(imgs => setImages(imgs)); // Otra forma\r\n    // }, [category]);\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"card animate__animated animate__fadeIn\">{category}</h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n            <div className=\"card-grid\">\r\n                {images.map((img) => (\r\n                    <GifGridItem\r\n                        key={img.id}\r\n                        {...img}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    /** Al colocar la categoría como dependencia, cada vez que la categoría cambie se va a ejecutar el useEffect */\r\n    useEffect(() => {\r\n        getGifs(category).then(imgs => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n        });\r\n    }, [category]);\r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport {  } from \"module\";\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    // const categories = ['Rick and Morty', 'Bojack', 'Big Mounth']\r\n\r\n    const [categories, setCategories] = useState(['Rick and Morty']);\r\n\r\n    // const handleAdd = () => {\r\n    //     // setCategories([...categories, 'South Park']);\r\n    //     /** Otra forma: setCategories recibe un callback donde el primer valor es el estado anterior y luego regresa el nuevo estado*/\r\n    //     setCategories(categories => ['South Park', ...categories]);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h1>GiftExpertApp</h1>\r\n            <AddCategory setCategories ={ setCategories } />\r\n            <hr/>\r\n\r\n            {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n            <ol>{categories.map( category => (\r\n                <GifGrid key={category} category={category} />\r\n            ))}</ol>\r\n        </>\r\n    );\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}